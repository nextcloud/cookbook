openapi: 3.0.1
info:
  title: Nextcloud cookbook app
  description: >-
    This is the public API definition of the [cookbook app](https://github.com/nextcloud/cookbook) for the [nextcloud server](http://nextcloud.com).
    
    
    The total API is separated into two parts:

    - There is the public API part that can be used from 3rd party apps and scripts.

    - There is the internal API that is used only by the web app of the cookbook app. This is described here.
    

    The internal part is intended only to be used by the internal web app.
    It uses session based authentication and thus requires a `requesttoken` to protect against CSRF attacks.
    The generation and updating of these tokens is not part of the app but the regular browser capabilities and the nextcloud web frontend is used here instead.


    In contrast, the External APIs are intended for use by external services.
    These endpoints require the user credentials to be present in every request.
    Thus, no session is created and no cookies or similar needs to be handled.
    Technically, there is a CORS preflight possible but it is not required for the function of the endpoints.

    
    Further contact can be found on the matrix.org server in the room [#nextcloud-cookbook:matrix.org](https://matrix.to/#/#nextcloud-cookbook:matrix.org) for general questions.
    Additionally, there is [#nextcloud-cookbook-integration:matrix.org](https://matrix.to/#/#nextcloud-cookbook-integration:matrix.org) for questions related to the API and third party integration.
    Further information on the different versions can be found in [the API overview page](https://nextcloud.github.io/cookbook/dev/api/index).
  #contact:
    #email: apiteam@swagger.io
  license:
    name: AGPL-3
    url: 'http://www.gnu.org/licenses/agpl-3.0.de.html'
  version: 0.1.2

#externalDocs:
#  description: Find out more about Swagger
#  url: 'http://swagger.io'

servers:
  - url: 'http://localhost:8000/apps/cookbook'
  - url: '{protocol}://{server}'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
      server:
        default: 'example.com'

tags:
  - name: Recipes
    description: Everything related to recipes and their usage
  - name: Categories
    description: Access to the categories of the recipes
  - name: Tags
    description: Access to tags/keywords of recipes
  - name: Misc
    description: Other API endpoints



components:
  schemas:
    Category:
      $ref: objects.yaml#/Category
    Config:
      $ref: objects.yaml#/Config
    Error:
      $ref: objects.yaml#/Error
    Keyword:
      $ref: objects.yaml#/Keyword
    RecipeStub:
      $ref: objects.yaml#/RecipeStub
    StubList:
      $ref: objects.yaml#/StubList
    Recipe:
      $ref: objects.yaml#/Recipe
    Url:
      $ref: objects.yaml#/Url
    Version:
      $ref: objects.yaml#/Version
  
  securitySchemes:
    app_password:
      type: http
      scheme: basic
      description: Use username and app password

security:
  - app_password: []

paths:
  
  /api/version:
    get:
      tags: [ Misc ]
      summary: Get the version of the API endpoint
      operationId: version
      responses:
        '200':
          description: API version
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Version"
  /api/v1/reindex:
    post:
      tags: [ Misc ]
      summary: Trigger a rescan of all recipes into the caching database
      operationId: reindex
      responses:
        200:
          description: The reindex process was done.
          content:
            application/json:
              schema:
                type: string
                example: Search index rebuilt successfully
  /api/v1/config:
    get:
      tags: [ Misc ]
      summary: Get the current configuration of the app
      operationId: getConfig
      responses:
        200:
          description: The config was read successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Config"
    post:
      tags: [ Misc ]
      summary: Set the configuration for the current user
      operationId: setConfig
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Config"
      responses:
        200:
          description: The configuration was successfully saved.
          content:
            application/json:
              schema:
                type: string
                example: OK
  
  /api/v1/import:
    post:
      tags: [ Recipes ]
      summary: Import a recipe using schema.org metadata from a website
      operationId: import
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Url"

      responses:
        200:
          description: Successfully imported recipe
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipe"
        400:
          description: The URL to be imported was not inserted in the request or any other issue was rosen.
          content:
            application/json:
              schema:
                type: string
                example: Field "url" is required
        409:
          description: There exists a recipe with that name already. Import was aborted.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/recipes/{id}/image:
    get:
      tags: [ Recipes ]
      summary: Get the main image of a recipe. If no image is stored a fallback image is delivered.
      operationId: getImage
      parameters:
        - in: path
          name: id
          description: The id of the recipe to obtain the image for.
          required: true
          schema:
            type: integer
        - in: query
          name: size
          description: >
            The size of the requested image

            * `full`    - Full resolution image (size full res)
            * `thumb`   - thumbnail of the image (size 250px)
            * `thumb16` - icon of the image (size 16px)

            by default the full size image will be returned
          required: false
          schema:
            type: string
            enum: [full, thumb, thumb16]
      responses:
        200:
          description: Image was obtained and will be in response either as image/jpeg or image/svg+xml
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/svg+xml:
              schema:
                type: string
                format: binary
        406:
          description: The recipe has no image whose MIME type matches the Accept header
  /api/v1/search/{query}:
    parameters:
      - in: path
        name: query
        required: true
        description: The search string, urlencoded, separated with spaces and/or commas
        schema:
          type: string
    get:
      tags: [ Recipes ]
      summary: Search for recipes for keywords, tags and categories with the named search string
      operationId: search
      responses:
        200:
          description: The recipes were obtained successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StubList"
        500:
          description: An error has been thrown
          content:
            application/json:
              schema:
                type: string
                description: The error message
  /api/v1/recipes:
    get:
      tags: [ Recipes ]
      summary: Get all recipes in the database
      operationId: listRecipes
      responses:
        200:
          description: Successfully obtained all recipes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StubList"
    post:
      tags: [ Recipes ]
      summary: Create a new recipe
      operationId: newRecipe
      requestBody:
        description: |
          A JSON representation of the recipe to be saved.
          
          See also the structure at https://schema.org/Recipe
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Recipe"
              example:
                name: "Chips"
                description: "A very delicious way of getting kids quiet"
                ingredients:
                  - "1 pack of pre-fried chips"
                tools: ["common oven"]
                instructions:
                  - "Put the chips in the oven"
                  - "Wait until the are due"
      responses:
        200:
          description: Successfully created new recipe
          content:
            application/json:
              schema:
                type: integer
                example: 2462
                description: The id of the newly created recipe
        409:
          description: A recipe with the name was already found on the server. No recipe is created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        422:
          description: There was no name in the request given for the recipe. Cannot save the recipe.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/recipes/{id}:
    parameters:
      - in: path
        name: id
        required: true
        description: The id of the recipe
        schema:
          type: integer
    get:
      tags: [ Recipes ]
      summary: Get a single recipe from the server
      operationId: recipeDetails
      responses:
        200:
          description: Recipe was sucessfully obtained
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipe"
        404:
          description: The given recipe id was not found
          content:
            application/json:
              schema:
                type: integer
                example: 2345
                description: The id of the recipe that was not found
    put:
      tags: [ Recipes ]
      summary: Update a recipe
      operationId: updateRecipe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Recipe"
      responses:
        200:
          description: The recipe was sucessfully updated
          content:
            application/json:
              schema:
                type: integer
                description: The id of the updated recipe
                example: 2345
        422:
          description: There was no name in the request given for the recipe. Cannot save the recipe.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        
    delete:
      tags: [ Recipes ]
      summary: Delete an existing recipe
      operationId: deleteRecipe
      responses:
        200:
          description: The recipe was deleted successfully
          content:
            application/json:
              schema:
                type: string
                example: Recipe 2345 deleted successfully
        502:
          description: An Exception was thrown
          content:
            application/json:
              schema:
                type: string
                example: Recipe with id 2345 was not found.
                description: Error message
  
  /api/v1/keywords:
    get:
      tags: [ Tags ]
      summary: Get all known keywords
      operationId: listKeywords
      responses:
        '200':
          description: Successfully obtained all keywords
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Keyword"

  /api/v1/tags/{keywords}:
    get:
      tags: [ Tags ]
      summary: Get all recipes associated with certain keywords
      operationId: recipesWithKeyword
      parameters:
        - in: path
          name: keywords
          required: true
          description: Comma separated list of keywords, urlencoded
          schema:
            type: string
            example: vegetarian,sweet
      responses:
        200:
          description: Recipes were successfully obtained
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StubList"
        500:
          description: An error occured
          content:
            application/json:
              schema:
                type: string
                example: "SQLException: Something went wrong."
  
  /api/v1/categories:
    get:
      tags: [ Categories ]
      summary: Get all known categories
      operationId: listCategories
      responses:
        200:
          description: >-
            Sucessfully obtained all categories
            
            
            Please note: A category name of `*` indicates the number of
            recipes with no category associated.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
              example:
                - name: Dinner
                  recipe_count: 21
                - name: Lunch
                  recipe_count: 10
                - name: '*'
                  recipe_count: 3
  /api/v1/category/{category}:
    get:
      tags: [ Categories ]
      summary: Get all recipes of a certain category
      operationId: recipesInCategory
      parameters:
        - in: path
          name: category
          required: true
          description: >-
            The name of the category to be queried as urlencoded string
            
            
            Put the string `_` to obtain all recipes with no category
          schema:
            type: string
      responses:
        200:
          description: The filtered recipes belonging to the category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StubList"
        500:
          description: An exception was issued.
          content:
            application/json:
              schema:
                type: string
                description: The error message
                example: Could not find category foo.
    put:
      tags: [ Categories ]
      summary: Rename a category
      operationId: renameCategory
      parameters:
        - in: path
          name: category
          required: true
          description: >-
            The name of the category to be queried as urlencoded string
            
            
            Put the string `_` to obtain all recipes with no category
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Lunch
                  description: The new name to rename the category to
              required:
                - name
      responses:
        200:
          description: The category was renamed successfully
          content:
            application/json:
              schema:
                type: string
                example: Lunch
        400:
          description: The new category name was not included during the request.
        500:
          description: The renaming did not succeed.
          content:
            application/json:
              schema:
                type: string
                description: The error message
                example: There exists already a category of that name.
